{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/helpers/fake-server.js","dummy/tests/helpers/index.js","dummy/tests/test-helper.js","dummy/tests/unit/mixins/ajax-test.js","dummy/tests/unit/mixins/form-test.js","dummy/tests/unit/mixins/model-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/helpers/fake-server\", [\"exports\", \"ember-cli-fake-server\"], function (_exports, _emberCliFakeServer) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"FakeServer\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliFakeServer.default;\n    }\n  });\n  Object.defineProperty(_exports, \"stubRequest\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliFakeServer.stubRequest;\n    }\n  });\n  0; //eaimeta@70e063a35619d71f0,\"ember-cli-fake-server\"eaimeta@70e063a35619d71f\n});","define(\"dummy/tests/helpers/index\", [\"exports\", \"ember-qunit\"], function (_exports, _emberQunit) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupApplicationTest = setupApplicationTest;\n  _exports.setupRenderingTest = setupRenderingTest;\n  _exports.setupTest = setupTest;\n  0; //eaimeta@70e063a35619d71f0,\"ember-qunit\"eaimeta@70e063a35619d71f\n\n  // This file exists to provide wrappers around ember-qunit's / ember-mocha's\n  // test setup functions. This way, you can easily extend the setup that is\n  // needed per test type.\n  function setupApplicationTest(hooks, options) {\n    (0, _emberQunit.setupApplicationTest)(hooks, options); // Additional setup for application tests can be done here.\n    //\n    // For example, if you need an authenticated session for each\n    // application test, you could do:\n    //\n    // hooks.beforeEach(async function () {\n    //   await authenticateSession(); // ember-simple-auth\n    // });\n    //\n    // This is also a good place to call test setup functions coming\n    // from other addons:\n    //\n    // setupIntl(hooks); // ember-intl\n    // setupMirage(hooks); // ember-cli-mirage\n  }\n\n  function setupRenderingTest(hooks, options) {\n    (0, _emberQunit.setupRenderingTest)(hooks, options); // Additional setup for rendering tests can be done here.\n  }\n\n  function setupTest(hooks, options) {\n    (0, _emberQunit.setupTest)(hooks, options); // Additional setup for unit tests can be done here.\n  }\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"dummy/app\",0,\"dummy/config/environment\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"qunit-dom\",0,\"ember-qunit\"eaimeta@70e063a35619d71f\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/mixins/ajax-test\", [\"@ember/object\", \"ember-easy-orm/mixins/ajax\", \"qunit\", \"ember-qunit\", \"ember-cli-fake-server\"], function (_object, _ajax, _qunit, _emberQunit, _emberCliFakeServer) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"@ember/object\",0,\"ember-easy-orm/mixins/ajax\",0,\"qunit\",0,\"ember-qunit\",0,\"ember-cli-fake-server\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Acceptance | Mixin | ajax', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _emberCliFakeServer.setupFakeServer)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('ajaxMixin object init', function (assert) {\n      const AjaxObject = _object.default.extend(_ajax.default);\n\n      let subject = AjaxObject.create();\n      assert.ok(subject);\n      assert.strictEqual(subject, subject.request.parent);\n      assert.expect(2);\n    });\n    (0, _qunit.test)('ajaxMixin ajax', function (assert) {\n      let AjaxObject = _object.default.extend(_ajax.default);\n\n      const done = assert.async();\n      assert.expect(3);\n      (0, _emberCliFakeServer.stubRequest)('get', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      let subjectError = AjaxObject.create({\n        RESTSerializer: function () {\n          throw {\n            msg: 'error'\n          };\n        }\n      });\n      subjectError.ajax('get', '/v1/api').catch(function (data) {\n        assert.strictEqual(data.msg, 'error');\n        done();\n      });\n      const done2 = assert.async();\n      let subjectSuccess = AjaxObject.create();\n      subjectSuccess.ajax('get', '/v1/api').then(function (data) {\n        return data;\n      }).then(function (data) {\n        assert.strictEqual(data.code, 0);\n        assert.strictEqual(data.msg, 'success');\n        done2();\n      });\n    });\n    (0, _qunit.test)('ajaxMixin get post put delete success', function (assert) {\n      const AjaxObject = _object.default.extend(_ajax.default);\n\n      assert.expect(8);\n      (0, _emberCliFakeServer.stubRequest)('get', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('put', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('post', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('delete', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      let ajax = AjaxObject.create({\n        getSerializer(data) {\n          return {\n            code: data.code,\n            method: 'get'\n          };\n        },\n\n        postSerializer(data) {\n          return {\n            code: data.code,\n            method: 'post'\n          };\n        },\n\n        putSerializer(data) {\n          return {\n            code: data.code,\n            method: 'put'\n          };\n        },\n\n        deleteSerializer(data) {\n          return {\n            code: data.code,\n            method: 'delete'\n          };\n        }\n\n      });\n      const doneGet = assert.async();\n      ajax.request.get('/v1/api').then(function (data) {\n        assert.strictEqual(data.code, 0);\n        assert.strictEqual(data.method, 'get');\n        doneGet();\n      });\n      const donePut = assert.async();\n      ajax.request.put('/v1/api').then(function (data) {\n        assert.strictEqual(data.code, 0);\n        assert.strictEqual(data.method, 'put');\n        donePut();\n      });\n      const donePost = assert.async();\n      ajax.request.post('/v1/api').then(function (data) {\n        assert.strictEqual(data.code, 0);\n        assert.strictEqual(data.method, 'post');\n        donePost();\n      });\n      const doneDelete = assert.async();\n      ajax.request.delete('/v1/api').then(function (data) {\n        assert.strictEqual(data.code, 0);\n        assert.strictEqual(data.method, 'delete');\n        doneDelete();\n      });\n    });\n    (0, _qunit.test)('ajaxMixin get put post delete error', function (assert) {\n      const AjaxObject = _object.default.extend(_ajax.default);\n\n      let ajax = AjaxObject.create();\n      (0, _emberCliFakeServer.stubRequest)('get', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('put', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('post', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('delete', '/v1/api', function () {\n        return this.success({\n          msg: 'success',\n          code: 0,\n          data: []\n        });\n      });\n      assert.expect(8);\n\n      ajax.getSerializer = function (data) {\n        throw {\n          code: data.code + 1,\n          msg: 'error'\n        };\n      };\n\n      ajax.putSerializer = function (data) {\n        throw {\n          code: data.code + 1,\n          msg: 'error'\n        };\n      };\n\n      ajax.postSerializer = function (data) {\n        throw {\n          code: data.code + 1,\n          msg: 'error'\n        };\n      };\n\n      ajax.deleteSerializer = function (data) {\n        throw {\n          code: data.code + 1,\n          msg: 'error'\n        };\n      };\n\n      const doneErrorGet = assert.async();\n      ajax.request.get('/v1/api').catch(function (data) {\n        assert.strictEqual(data.code, 1);\n        assert.strictEqual(data.msg, 'error');\n        doneErrorGet();\n      });\n      const doneErrorPut = assert.async();\n      ajax.request.put('/v1/api').catch(function (data) {\n        assert.strictEqual(data.code, 1);\n        assert.strictEqual(data.msg, 'error');\n        doneErrorPut();\n      });\n      const doneErrorPost = assert.async();\n      ajax.request.post('/v1/api').catch(function (data) {\n        assert.strictEqual(data.code, 1);\n        assert.strictEqual(data.msg, 'error');\n        doneErrorPost();\n      });\n      const doneErrorDelete = assert.async();\n      ajax.request.delete('/v1/api').catch(function (data) {\n        assert.strictEqual(data.code, 1);\n        assert.strictEqual(data.msg, 'error');\n        doneErrorDelete();\n      });\n    });\n  });\n});","define(\"dummy/tests/unit/mixins/form-test\", [\"qunit\"], function (_qunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Unit | Mixin | form'); // Replace this with your real tests.\n\n  (0, _qunit.test)('formComponent object init', function (assert) {\n    // let subject = new Form();\n    // assert.ok(subject);\n    assert.true(true);\n  });\n  (0, _qunit.test)('godForm object init', function (assert) {\n    // let subject = new GodForm();\n    // assert.strictEqual(subject.modelName, 'user');\n    // assert.ok(subject);\n    assert.true(true);\n  });\n});","define(\"dummy/tests/unit/mixins/model-test\", [\"@ember/object\", \"@ember/array\", \"ember-easy-orm/mixins/model\", \"qunit\", \"ember-qunit\", \"ember-cli-fake-server\"], function (_object, _array, _model, _qunit, _emberQunit, _emberCliFakeServer) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"@ember/object\",0,\"@ember/array\",0,\"ember-easy-orm/mixins/model\",0,\"qunit\",0,\"ember-qunit\",0,\"ember-cli-fake-server\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Acceptance | Mixin | model', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _emberCliFakeServer.setupFakeServer)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('model mixin', function (assert) {\n      let ModelClass = _object.default.extend(_model.default);\n\n      let subject = ModelClass.create();\n      assert.ok(subject);\n    });\n    (0, _qunit.test)('model mixin createRecord', function (assert) {\n      let ModelClass = _object.default.extend(_model.default, {\n        init() {\n          this._super(...arguments);\n\n          this.model = {\n            name: _model.DS.attr('string'),\n            gender: _model.DS.attr('string', {\n              defaultValue: 'f'\n            }),\n            address: _model.DS.attr({\n              defaultValue: function () {\n                return {\n                  c: Math.random(new Date().getTime())\n                };\n              }\n            })\n          };\n        }\n\n      });\n\n      let subject = ModelClass.create();\n      assert.ok(subject);\n      let record = subject.createRecord();\n      assert.strictEqual(record.name, '');\n      assert.strictEqual(record.gender, 'f');\n      let record2 = subject.createRecord();\n      assert.notEqual(record.address.c, record2.address.c);\n      assert.strictEqual(record.gender, record2.gender);\n    });\n    (0, _qunit.test)('model mixin filterParams', function (assert) {\n      let ModelClass = _object.default.extend(_model.default);\n\n      let subject = ModelClass.create()._filterParams({\n        a: null,\n        b: undefined,\n        c: 0,\n        d: '',\n        e: [],\n        f: ' ',\n        g: {}\n      });\n\n      console.log(JSON.stringify(subject));\n      assert.strictEqual(Object.keys(subject).length, 2);\n    });\n    (0, _qunit.test)('model mixin find', function (assert) {\n      let ModelClass = _object.default.extend(_model.default);\n\n      const done = assert.async();\n      assert.expect(16);\n      (0, _emberCliFakeServer.stubRequest)('get', '/v1/api', function () {\n        return this.success({\n          data: [{\n            a: 1\n          }, {\n            a: 1\n          }],\n          object: {\n            a: 1\n          },\n          number: 1,\n          string: '1'\n        });\n      });\n      (0, _emberCliFakeServer.stubRequest)('get', '/v2/api', function () {\n        return this.success([{\n          a: 1\n        }, {\n          a: 1\n        }]);\n      });\n      (0, _emberCliFakeServer.stubRequest)('get', '/v2/api/1', function () {\n        return this.success({\n          code: 0\n        });\n      });\n      let subject = ModelClass.create({\n        namespace: '/v1',\n        url: '/api',\n        displayModel: {\n          data: 'array',\n          object: 'object',\n          string: 'string',\n          number: 'number'\n        }\n      });\n      subject.find().then(function (resp) {\n        assert.ok((0, _array.isArray)(resp.data));\n        assert.strictEqual(resp.data.length, 2);\n        assert.strictEqual(typeof resp.data.popObject, 'function');\n        assert.strictEqual(typeof resp.object, 'object');\n        assert.strictEqual(resp.object.a, 1);\n        assert.strictEqual(typeof resp.string, 'string');\n        assert.strictEqual(typeof resp.number, 'number');\n        assert.strictEqual(resp.string, '1');\n        assert.strictEqual(resp.number, 1);\n        done();\n      });\n      let subject2 = ModelClass.create({\n        namespace: '/v1',\n        url: '/api',\n        rootKey: 'data'\n      });\n      const done2 = assert.async();\n      subject2.find().then(function (resp) {\n        assert.ok((0, _array.isArray)(resp));\n        assert.strictEqual(resp.length, 2);\n        assert.strictEqual(typeof resp.popObject, 'function');\n        done2();\n      });\n      let subject3 = ModelClass.create({\n        namespace: '/v2',\n        url: '/api'\n      });\n      const done3 = assert.async();\n      subject3.find().then(function (resp) {\n        assert.ok((0, _array.isArray)(resp));\n        assert.strictEqual(resp.length, 2);\n        assert.strictEqual(typeof resp.popObject, 'function');\n        done3();\n      });\n      const done4 = assert.async();\n      subject3.findOne('1').then(function (resp) {\n        assert.strictEqual(resp.code, 0);\n        done4();\n      });\n    });\n    (0, _qunit.test)('model DS', function (assert) {\n      assert.expect(9);\n      assert.strictEqual(_model.DS.attr('string'), '');\n      assert.strictEqual(_model.DS.attr('number'), 0);\n      assert.true(_model.DS.attr('boolean'));\n      assert.strictEqual(_model.DS.attr('number', {\n        defaultValue: 20\n      }), 20);\n      assert.false(_model.DS.attr('boolean', {\n        defaultValue: false\n      }));\n      assert.strictEqual(_model.DS.attr('array')().length, 0);\n      assert.strictEqual(_model.DS.attr({\n        defaultValue: 10\n      }), 10);\n      assert.strictEqual(_model.DS.attr({\n        defaultValue: function () {\n          return {\n            msg: 'ok'\n          };\n        }\n      })().msg, 'ok');\n      assert.strictEqual(_model.DS.attr('number', {\n        defaultValue: function () {\n          return 11;\n        }\n      })(), 11);\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}